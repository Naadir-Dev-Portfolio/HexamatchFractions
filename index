<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8">
<title>HexaMatch</title>
<meta name="viewport" content="width=device-width,initial-scale=1.0">
<link href="https://fonts.googleapis.com/css2?family=Manrope:wght@400;700&display=swap" rel="stylesheet">
<style>
/* ------------ GLOBAL THEME (matches Arithmetic-Rain) ------------ */
*{margin:0;padding:0;box-sizing:border-box}
html,body{width:100%;height:100%;font-family:'Manrope',sans-serif;background:linear-gradient(135deg,#181a1b 0%,#232526 100%);color:#f3f3f3;overflow:hidden}
button{font-family:'Manrope',sans-serif;cursor:pointer}
canvas{display:block}

/* ------------ BACKGROUND BUBBLES ------------ */
#bgBubbles{position:fixed;top:0;left:0;width:100vw;height:100vh;pointer-events:none;z-index:0}

/* ------------ HUD (score/lives only) ------------ */
#hud{position:absolute;top:24px;left:50%;transform:translateX(-50%);display:flex;gap:2em;background:rgba(36,37,38,.9);padding:10px 28px;border-radius:14px;border:1px solid #232526;box-shadow:0 2px 12px rgba(34,48,70,.06);z-index:10}
#hud span{font-weight:700}

/* ------------ BIG TARGET, TIMER & CURRENT SUM ------------ */
#bigTarget{position:absolute;top:90px;left:50%;transform:translateX(-50%);font-size:2.6rem;text-shadow:1px 1px 3px #000;z-index:10;pointer-events:none}
#roundTimer{position:absolute;top:140px;left:50%;transform:translateX(-50%);font-size:1.9rem;text-shadow:1px 1px 3px #000;z-index:10;transition:color .3s,transform .3s}
#roundTimer.urgent{color:#ff5252;animation:pulse .7s infinite}
@keyframes pulse{0%,100%{transform:translateX(-50%) scale(1)}50%{transform:translateX(-50%) scale(1.3)}}
#currentSum{position:absolute;top:190px;left:50%;transform:translateX(-50%);font-size:1.5rem;text-shadow:1px 1px 3px #000;z-index:10;pointer-events:none}

/* ------------ TOGGLES & SLIDE PANELS ------------ */
#toggleInstructions,#infoToggle{background:#232526;border:1px solid #353637;color:#fff}
#toggleInstructions{position:fixed;top:24px;right:24px;padding:10px 22px;border-radius:8px;z-index:100}
#infoToggle{position:fixed;top:24px;left:24px;width:48px;height:48px;border-radius:50%;font-size:1.5rem;display:flex;align-items:center;justify-content:center;z-index:100}
#toggleInstructions:hover,#infoToggle:hover{background:#353637}
.panel{position:fixed;max-height:0;overflow:hidden;background:#232526;border:0 solid #353637;border-radius:16px;box-shadow:0 4px 24px rgba(30,60,114,.18);padding:0 22px;color:#f3f3f3;transition:max-height .4s cubic-bezier(.4,2,.6,1),padding .3s,border-width .3s;z-index:99}
.panel.expanded{max-height:320px;padding:22px;border-width:1px}
#instructions{top:68px;right:24px;width:340px}
#infoBox{top:68px;left:24px;width:370px}

/* ------------ GAME CANVAS & MESSAGE ------------ */
#gameCanvas{position:absolute;top:0;left:0;width:100%;height:100%;z-index:2;cursor:pointer;pointer-events:none}
#message{position:absolute;top:50%;left:50%;transform:translate(-50%,-50%);font-size:2rem;background:rgba(0,0,0,.7);padding:24px 40px;border-radius:16px;display:none;z-index:50}

/* ------------ START SCREEN ------------ */
#startScreen{position:absolute;top:50%;left:50%;transform:translate(-50%,-50%);background:#232526;padding:28px 56px;border-radius:18px;box-shadow:0 8px 32px #0006;z-index:60}
#startBtn{padding:.8em 2.2em;background:linear-gradient(135deg,#353637 0%,#232526 100%);border:none;border-radius:50px;color:#fff;font-size:1.1rem;font-weight:700}
#startBtn:hover{transform:scale(1.06);background:linear-gradient(135deg,#232526 0%,#353637 100%)}
</style>
</head>
<body>

<canvas id="bgBubbles"></canvas>

<!-- Info toggle & box -->
<button id="infoToggle">‚ìò</button>
<div id="infoBox" class="panel">
  <p><b>HexaMatch</b> was created by <b>Naadir</b> in 2024 with the help of <b>GPT-4</b>.</p>
  <p><b>Tech stack:</b> vanilla JavaScript, HTML5 Canvas, CSS3 ‚Äì no frameworks.</p>
</div>

<!-- Instructions toggle & box -->
<button id="toggleInstructions">‚ñ∂ Instructions</button>
<div id="instructions" class="panel">
  <p>Click hexagon tiles until the <b>Current</b> sum equals the <b>Target</b>.</p>
  <ul>
    <li>Click again to un-select a tile.</li>
    <li>Overshoot or timer hits 0 ‚Üí lose a life and retry.</li>
    <li>Exact match ‚Üí score points & advance level.</li>
  </ul>
</div>

<!-- HUD -->
<div id="hud">
  <span>‚≠ê Score: <span id="score">0</span></span>
  <span>‚ù§Ô∏è Lives: <span id="lives">3</span></span>
</div>

<!-- Big target, timer & Current -->
<div id="bigTarget">üéØ <span id="targetValue">0</span></div>
<div id="roundTimer"><span id="timerValue">30</span>s</div>
<div id="currentSum">Current: <span id="sumValue">0</span></div>

<!-- Canvas & message -->
<canvas id="gameCanvas"></canvas>
<div id="message"></div>

<!-- Start screen -->
<div id="startScreen">
  <button id="startBtn">‚ñ∂ Start Game</button>
</div>

<script>
// ==== CONFIGURABLE CONSTANTS ====
const CONFIG = {
  ROUND_TIME: 60,        // seconds per round
  TILE_COUNT: 8,         // how many hex tiles each round
  TILE_RADIUS: 44,       // radius in px of each tile
  FONT_TILE: '22px Manrope',  // font for tile labels
  FONT_HUD: '22px Manrope'    // font for current/target/timer
};

// ==== FRACTION UTILS ====
const gcd = (a,b) => b===0 ? Math.abs(a) : gcd(b,a%b);
class Fraction {
  constructor(n,d=1){ this.num=n; this.den=d; this.reduce(); }
  reduce(){ const g=gcd(this.num,this.den); this.num/=g; this.den/=g;
    if(this.den<0){ this.num=-this.num; this.den=-this.den; } }
  add(o){ return new Fraction(this.num*o.den + o.num*this.den, this.den*o.den); }
  sub(o){ return new Fraction(this.num*o.den - o.num*this.den, this.den*o.den); }
  toNumber(){ return this.num/this.den; }
  toString(){
    if(Math.abs(this.num)>=this.den){
      const w=Math.trunc(this.num/this.den),
            r=Math.abs(this.num%this.den);
      return r ? `${w} ${r}/${this.den}` : `${w}`;
    }
    return `${this.num}/${this.den}`;
  }
}

// ==== BACKGROUND BUBBLES ====
const bCanvas = document.getElementById('bgBubbles'),
      bCtx    = bCanvas.getContext('2d');
let BW,BH,bubs=[];
const resizeB = ()=>{ BW=bCanvas.width=innerWidth; BH=bCanvas.height=innerHeight; };
const initB   = ()=>{ bubs = Array.from({length:40},()=>{
                return { x:Math.random()*BW,
                         y:Math.random()*BH,
                         r:10+Math.random()*30,
                         d:0.5+Math.random()*1.5,
                         a:Math.random()*Math.PI*2
                       };
              }); };
function drawB(){
  bCtx.clearRect(0,0,BW,BH);
  bubs.forEach(p=>{
    bCtx.save();
    bCtx.globalAlpha = .12 + .08*Math.sin(Date.now()/1000 + p.a);
    const grad = bCtx.createRadialGradient(p.x,p.y,0,p.x,p.y,p.r);
    grad.addColorStop(0,'#fff'); grad.addColorStop(1,'#90caf9');
    bCtx.fillStyle = grad;
    bCtx.beginPath(); bCtx.arc(p.x,p.y,p.r,0,2*Math.PI); bCtx.fill();
    bCtx.restore();
    p.y -= p.d;
    if(p.y + p.r < 0){ p.y = BH + p.r; p.x = Math.random()*BW; }
  });
  requestAnimationFrame(drawB);
}
window.addEventListener('resize',()=>{
  resizeB(); initB();
});
resizeB(); initB(); drawB();

// ==== GAME CANVAS SETUP ====
const canvas = document.getElementById('gameCanvas'),
      ctx    = canvas.getContext('2d');
let CW,CH;
const resizeG = ()=>{ CW=canvas.width=innerWidth; CH=canvas.height=innerHeight; };
window.addEventListener('resize',resizeG);
resizeG();

// ==== TILE CLASS ====
class Tile {
  constructor(val,x,y){
    this.val = val;
    this.x   = x;
    this.y   = y;
    this.r   = CONFIG.TILE_RADIUS;
    this.selected = false;
    this.invalid  = false;
  }
  draw(){
    ctx.save();
    let grad = ctx.createLinearGradient(
      this.x-this.r, this.y-this.r,
      this.x+this.r, this.y+this.r
    );
    grad.addColorStop(0,
      this.invalid   ? '#e53935' :
      this.selected  ? '#43a047' :
                      '#ffeb3b'
    );
    grad.addColorStop(1,
      this.invalid   ? '#b71c1c' :
      this.selected  ? '#1b5e20' :
                      '#fbc02d'
    );
    ctx.fillStyle = grad;
    ctx.beginPath();
    for(let i=0;i<6;i++){
      const ang = Math.PI/3*i + Math.PI/6;
      const px  = this.x + this.r*Math.cos(ang),
            py  = this.y + this.r*Math.sin(ang);
      i ? ctx.lineTo(px,py) : ctx.moveTo(px,py);
    }
    ctx.closePath(); ctx.fill();
    ctx.lineWidth=2; ctx.strokeStyle='#000'; ctx.stroke();
    // Label
    ctx.fillStyle='#000';
    ctx.font = CONFIG.FONT_TILE;
    ctx.textAlign='center';
    ctx.textBaseline='middle';
    ctx.fillText(this.val.toString(), this.x, this.y);
    ctx.restore();
  }
  contains(px,py){
    const dx=px-this.x, dy=py-this.y;
    if(dx*dx+dy*dy > this.r*this.r) return false;
    const ang  = Math.atan2(dy,dx),
          dist = Math.hypot(dx,dy);
    // hexagon check
    return dist <= this.r/Math.cos((ang+Math.PI/6)%(Math.PI/3)-Math.PI/6);
  }
}

// ==== GAME STATE ====
const levels = [
  { maxDen:5,  target: new Fraction(1,1)   },
  { maxDen:8,  target: new Fraction(3,2)   },
  { maxDen:12, targetPct:75                }
];
let level     = 0,
    score     = 0,
    lives     = 3,
    current   = new Fraction(0,1),
    tiles     = [],
    timeLeft  = CONFIG.ROUND_TIME,
    playing   = false;

// ==== UI SHORTCUTS ====
const $=id=>document.getElementById(id);
function updateHUD(){
  const cfg = levels[level];
  $('targetValue').textContent = cfg.target
    ? cfg.target.toString()
    : cfg.targetPct+'%';
  $('sumValue').textContent   = current.toString();
  $('score').textContent      = score;
  $('lives').textContent      = lives;
  $('timerValue').textContent = Math.ceil(timeLeft);
  $('roundTimer').classList.toggle('urgent', timeLeft<=5);
}
function showMsg(txt,color='#fff',ms=1000){
  const m = $('message');
  m.textContent = txt;
  m.style.color = color;
  m.style.display = 'block';
  setTimeout(()=>m.style.display='none', ms);
}

// ==== ROUND CONTROL ====
function spawnTiles(){
  tiles = [];
  const cfg = levels[level];
  for(let i=0;i<CONFIG.TILE_COUNT;i++){
    const d   = 2 + Math.floor(Math.random()*(cfg.maxDen-1)),
          val = new Fraction(1,d),
          x   = 70 + Math.random()*(CW-140),
          y   = 180 + Math.random()*(CH-260);
    tiles.push(new Tile(val,x,y));
  }
}
function resetRound(){
  current  = new Fraction(0,1);
  timeLeft = CONFIG.ROUND_TIME;
  spawnTiles();
  updateHUD();
}
function nextRound(){
  level = Math.min(level+1, levels.length-1);
  resetRound();
}

// ==== CLICK LOGIC ====
canvas.addEventListener('click', e=>{
  if(!playing) return;
  const rect   = canvas.getBoundingClientRect(),
        cx     = e.clientX - rect.left,
        cy     = e.clientY - rect.top,
        cfg    = levels[level],
        target = cfg.target
                 ? cfg.target
                 : new Fraction(cfg.targetPct,100);
  for(const t of tiles){
    if(t.contains(cx,cy)){
      if(!t.selected){
        const sum = current.add(t.val);
        if(sum.toNumber()>target.toNumber()){
          t.invalid = true;
          lives--; updateHUD();
          showMsg('‚ùå Overshoot','#ff5252');
          setTimeout(resetRound,800);
        } else {
          t.selected = true;
          current = sum;
          updateHUD();
          if(current.toNumber()===target.toNumber()){
            score+=10; updateHUD();
            showMsg('‚úÖ Great job!','#00e676');
            setTimeout(nextRound,800);
          }
        }
      } else {
        t.selected=false; t.invalid=false;
        current = current.sub(t.val);
        updateHUD();
      }
      break;
    }
  }
});

// ==== RENDER + TIMER LOOP ====
let last = performance.now();
function render(now){
  const dt = (now - last)/1000;
  last = now;
  if(playing){
    timeLeft -= dt;
    if(timeLeft<=0){
      lives--; updateHUD();
      showMsg('‚è∞ Time up','#ff5252');
      resetRound();
    }
  }
  ctx.clearRect(0,0,CW,CH);
  tiles.forEach(t=>t.draw());
  updateHUD();
  requestAnimationFrame(render);
}
requestAnimationFrame(render);

// ==== PANEL TOGGLES ====
$('toggleInstructions').onclick = ()=>{
  const p = $('instructions');
  p.classList.toggle('expanded');
  $('toggleInstructions').textContent =
    (p.classList.contains('expanded')?'‚ñº ':'‚ñ∂ ')+'Instructions';
};
$('infoToggle').onclick = ()=>$('infoBox').classList.toggle('expanded');

// ==== START GAME (enables canvas clicks) ====
$('startBtn').onclick = ()=>{
  playing = true;
  $('startScreen').style.display = 'none';
  canvas.style.pointerEvents = 'auto';
  resetRound();
};
</script>
</body>
</html>
